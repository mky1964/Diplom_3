{"name": "test_after_placing_an_order_number_appears_in_work[firefox]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <p class=\"AppHeader_header__linkText__3q_va ml-2\"> is not clickable at point (300,44) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31", "trace": "self = <tests.order_feed_tests.TestOrderFeed object at 0x000002A97A46AAB0>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"e7486438-a40e-461b-952f-654dafe5cf73\")>\nnew_user = {'email': 'onewman@example.com', 'name': 'Amber Kane', 'password': '(STh@CFlU1', 'token': 'Bearer eyJhbGciOiJIUzI1NiIs...DY3OWVkMjgwMDAxYjRiODkyYyIsImlhdCI6MTcyNjI5NTM5OSwiZXhwIjoxNzI2Mjk2NTk5fQ.ncmbvUt-dSJF2GUM97LjKoeKHaf7z1SpIpOYtLYKQBA'}\n\n    @allure.feature('test_after_placing_an_order_number_appears_in_work')\n    @allure.description('Позитивный тест.Лента заказов.'\n                        ' после оформления заказа его номер появляется в разделе В работе')\n    def test_after_placing_an_order_number_appears_in_work(self, driver, new_user):\n        main_page_1 = MainPage(driver)\n        time.sleep(3)\n        account_1 = Account(driver)\n        new_user_with_accesstoken = account_1.registration_of_new_user(new_user)\n        order_ingredients = {\n            'ingredients': [Constants.HASH_INGREDIENT_FLUO_BUN, Constants.HASH_INGREDIENT_MEAT_MOLLUSC]}\n    \n        main_page_1.click_on_private_account_button(5)\n        time.sleep(3)\n        main_page_1.set_text_to_element_located(PrivateAccountLocators.EMAIL_PLACEHOLDER,\n                                                new_user_with_accesstoken['email'], 5)\n        main_page_1.set_text_to_element_located(PrivateAccountLocators.PASSWORD_PLACEHOLDER,\n                                                new_user_with_accesstoken['password'], 5)\n        main_page_1.click_on_element_located(PrivateAccountLocators.ENTER_BUTTON, 5)\n        WebDriverWait(driver, 10).until_not(\n            EC.visibility_of_element_located((By.XPATH, '//*[@class=\"Modal_modal_overlay__x2ZCr\"]')))\n>       account_1.click_on_element_located(MainPageLocators.ORDERS_FEED_FROM_MAIN_BUTTON, 30)\n\norder_feed_tests.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\base_page.py:31: in click_on_element_located\n    element.click()\n..\\..\\Diplom_2\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\Diplom_2\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\Diplom_2\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002A97A557620>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <p class=\\\\\"AppHeader_heade...sys.mjs:205:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <p class=\"AppHeader_header__linkText__3q_va ml-2\"> is not clickable at point (300,44) because another element <div class=\"Modal_modal_overlay__x2ZCr\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:193:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:337:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:177:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:136:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:205:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:85:31\n\n..\\..\\Diplom_2\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Позитивный тест.Лента заказов. после оформления заказа его номер появляется в разделе В работе", "steps": [{"name": "click_on_private_account_button", "status": "passed", "parameters": [{"name": "delay_time", "value": "5"}], "start": 1726295430082, "stop": 1726295430380}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1726295396875, "stop": 1726295433755, "uuid": "b45595be-f8fd-4d34-97b0-5576b17f3607", "historyId": "8ecd6d71017bdad0ca796316c424c986", "testCaseId": "5b5f88b361b5676cc4f458c0a15ea95b", "fullName": "order_feed_tests.TestOrderFeed#test_after_placing_an_order_number_appears_in_work", "labels": [{"name": "feature", "value": "test_after_placing_an_order_number_appears_in_work"}, {"name": "suite", "value": "order_feed_tests"}, {"name": "subSuite", "value": "TestOrderFeed"}, {"name": "host", "value": "LAPTOP-KL5MP4V8"}, {"name": "thread", "value": "3756-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "order_feed_tests"}]}